Problem 6:Integer Break

	Step 1: Define recursively
		Base case:
			If the given number is 1, return 1

		Recursive case:
			Call the given number minus the current i, where 1 <= i <= given

When the call returns, multiply the returned number by the current i. If this is higher than the previous number, replace it. When the loop breaks, return the calculated number.

	Step 2: Data Structure use
A dictionary can be used to store the highest product. When the number is encountered again, the dictionary will return the stored number. 

Step 3: IDEAL/Duke 7
	IDEAL:
		I: Identify the problem
To calculate the highest possible product of any two numbers whose sum is equal to the given number, using dynamic programming
			D: Define your goals
Identify if the smallest number in a pair is larger than the largest number of the previous pair
Recursively call the remaining pairs
Return the largest possible number of pairs chained together
Use dynamic programming to store and access previous numbersâ€™ highest product
			E: Explore possible solutions
In this one, choosing the data structure for dynamic programming was fairly easy, but calculating the highest product is a little complicated.
			A: Anticipate and Act
Given the conditions, there is nothing particularly dangerous that could break this code
			L: Look and Learn
In this problem, I had to realize that calculating stuff without recursion is also a valid tactic as I was trying too much to only use recursion to solve the problem.
		Duke 7:
			1: Work small instance by hand
Given input 4, 4=1+3 -> 1*3=3 and 4=2+2 -> 2*2=4. Four is the larger products the output is 4
			2:  Write process
Determine the largest product of a particular sum of the given number by going through every possible combination of numbers whose sum is the given. Then repeat for each of those numbers
			3: Find patterns
Find 2 numbers whose sum is the given.
Recursively call those numbers.
Determine if the highest product of those numbers is larger than the product for the sum
Loop previous steps for every all combination of numbers whose sum is the given
Return the largest product

			4: Check by hand
				 4 returns 4, and 6 returns 9
			5: Write code
				Written
			6: Run test cases
Run using 6, and 10. All working correctly
			7: Debug
				Debugging complete
        
 Step 4: Code
 def integer_break(num, D): #D is a dictionary from Hash file
    if D.search(num):
        return D.read(num)
    
    if num < 2:
        return 1
    
    max_product = 0
    for i in range(1, num):
        product1 = integer_break(num-i, D) * i
        product2 = (num-i) * i
        if product1 > product2:
            product = product1
        else:
            product  = product2
            
        if product > max_product:
            max_product = product
    
    D.insert(num, max_product)
    return max_product
