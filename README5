Problem 8: Perfect Squares

	Step 1: Define recursively
		Base case:
If the given number is 0, return 0. If the given number is less than 0, return None

		Recursive case:
If the perfect square is more than the given number, return the current number of perfect squares

			Otherwise, call the given number minus the perfect square

When the call returns, compare the number of perfect squares used with the number of perfect squares used for the previous perfect square (i.e. if given number is 4, then when perfects square is 1 you use four 1s, then when perfect square is 4, then you use one 4, so one 4 is the fewer than four 1s)

	Step 2: Data Structure use
A dictionary can be used to store the smallest number of perfect squares that each number uses. When you encounter that number again you can just return that number.

Step 3: IDEAL/Duke 7
IDEAL:
		I: Identify the problem
        To calculate the least number of perfect squares whose sum is the given, using dynamic programming
		D: Define your goals
        Identify perfect squares that are less than or equal to the given
        Recursively call the the given minus the square
        Return the smallest number of possible squares for a given number
        Use dynamic programming to store and access previous numbers’ least amount of squares
			E: Explore possible solutions
          This was a very straightforward problem, no real exploration needed
			A: Anticipate and Act
          Given the conditions, there is nothing particularly dangerous that could break this code
			L: Look and Learn
          Overall, this felt like a the previous problem but slightly different so there wasn’t much to note about it
		Duke 7:
			1: Work small instance by hand
          Given input 4, 4=1+1+1+1 and 4=4 . The one 4 is the least amount of squares possible, so the output is 1
			2:  Write process
          Subtract a square from the given and recursively call the remainder, then repeat for each given
			3: Find patterns
          If square is less than given, subtract
          Recursively call the remainder
          Return the smallest amount of squares needed
          Loop for every square that is smaller than the given

			4: Check by hand
				 4 returns 1, and 12 returns 3
			5: Write code
				Written
			6: Run test cases
         Run using 4, 9, and 12. All working correctly
			7: Debug
				Debugging complete
        
 Step 4: Code
 def perfect_squares(num, D): #D is a dictionary from the Hash file
    if num == 0:
        return 0
    
    if D.search(num):
        return D.read(num)
    
    if num < 0:
        return None
    
    max_ps = math.inf
    i = 1
    while i**2 <= num:
        ps = perfect_squares(num-(i**2), D) + 1
        if ps < max_ps:
            max_ps = ps
        i += 1
    
    D.insert(num, max_ps)
    return max_ps
